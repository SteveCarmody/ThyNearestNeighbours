as.layer( xyplot(temp.nov.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.dec.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.jan.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.feb.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.mar.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.apr.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.may.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.jun.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.jul.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.aug.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.sep.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.oct.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.nov.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.dec.max,col=c("red"), fill=c("red"), type=c("p")))
trellis.focus("toplevel") ## has coordinate system [0,1] x [0,1]
panel.text(0.785, 0.1, "1984 - 2014", cex = 1, font = 2)
panel.text(0.52, 0.91, "(A dot indicates a new monthly record low (blue) or high (red) average monthly temperature since 1920)")
panel.text(0.925,0.61, "Annual avg.", cex = 1, font =3)
panel.text(0.925,0.59, "temperature", cex = 1, font =3)
trellis.unfocus()
# Load required libraries
library(zoo)
library(lattice)
library(latticeExtra)
# Import data from text file
raw.data <- read.table("http://www.econ.upf.edu/~michael/visualdata/data/eklima.txt", skip=17, nrows=1140)
# Tranform data and perform additional calculations
temp.pre <- as.data.frame(raw.data[,2:3]) # Select only required columns
temp.pre[,1] <- as.yearmon(sprintf("%.4f",temp.pre[,1]),"%m.%Y") # Transform first column in Mon YYYY format
colnames(temp.pre) <- c("Month","TAM") # Rename column
# Calculate annual averages
avg <- rep(0,length=nrow(temp.pre)) # initialise empty vector of annual averages
years <- nrow(temp.pre)/12 # number of years in dataset
for (k in 1:(years)) {
avg[(12*(k-1)+1):(12*(k-1)+12)] <- mean(temp.pre[(12*(k-1)+1):(12*(k-1)+12),2])
}
temp.pre["AVG"] <- avg
# Calculate record monthly maxima and minima
# First split data by month
jan <- rep(0,length=nrow(temp.pre))
feb <- rep(0,length=nrow(temp.pre))
mar <- rep(0,length=nrow(temp.pre))
apr <- rep(0,length=nrow(temp.pre))
may <- rep(0,length=nrow(temp.pre))
jun <- rep(0,length=nrow(temp.pre))
jul <- rep(0,length=nrow(temp.pre))
aug <- rep(0,length=nrow(temp.pre))
sep <- rep(0,length=nrow(temp.pre))
oct <- rep(0,length=nrow(temp.pre))
nov <- rep(0,length=nrow(temp.pre))
dec <- rep(0,length=nrow(temp.pre))
for (k in 1:years) {
for (i in 1:12) {
if (i == 1) {
jan[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 2) {
feb[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 3) {
mar[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 4) {
apr[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 5) {
may[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 6) {
jun[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 7) {
jul[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 8) {
aug[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 9) {
sep[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 10) {
oct[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 11) {
nov[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
if (i == 12) {
dec[12*(k-1)+i] <- temp.pre[12*(k-1)+i,2]
}
}
}
# Then initialise empty vectors for each month maxima and minima
jan.max <- rep(NA,length=nrow(temp.pre))
jan.min <- rep(NA,length=nrow(temp.pre))
feb.max <- rep(NA,length=nrow(temp.pre))
feb.min <- rep(NA,length=nrow(temp.pre))
mar.max <- rep(NA,length=nrow(temp.pre))
mar.min <- rep(NA,length=nrow(temp.pre))
apr.max <- rep(NA,length=nrow(temp.pre))
apr.min <- rep(NA,length=nrow(temp.pre))
may.max <- rep(NA,length=nrow(temp.pre))
may.min <- rep(NA,length=nrow(temp.pre))
jun.max <- rep(NA,length=nrow(temp.pre))
jun.min <- rep(NA,length=nrow(temp.pre))
jul.max <- rep(NA,length=nrow(temp.pre))
jul.min <- rep(NA,length=nrow(temp.pre))
aug.max <- rep(NA,length=nrow(temp.pre))
aug.min <- rep(NA,length=nrow(temp.pre))
sep.max <- rep(NA,length=nrow(temp.pre))
sep.min <- rep(NA,length=nrow(temp.pre))
oct.max <- rep(NA,length=nrow(temp.pre))
oct.min <- rep(NA,length=nrow(temp.pre))
nov.max <- rep(NA,length=nrow(temp.pre))
nov.min <- rep(NA,length=nrow(temp.pre))
dec.max <- rep(NA,length=nrow(temp.pre))
dec.min <- rep(NA,length=nrow(temp.pre))
# Calculate monthly record maxima and minima
for (i in 2:nrow(temp.pre) ){
# Calculate monthly record maxima
if (jan[i] >= max(jan[1:(i-1)], na.rm=T)) {
jan.max[i] <- jan[i]
}
if (feb[i] >= max(feb[1:(i-1)], na.rm=T)) {
feb.max[i] <- feb[i]
}
if (mar[i] >= max(mar[1:(i-1)], na.rm=T)) {
mar.max[i] <- mar[i]
}
if (apr[i] >= max(apr[1:(i-1)], na.rm=T)) {
apr.max[i] <- apr[i]
}
if (may[i] >= max(may[1:(i-1)], na.rm=T)) {
may.max[i] <- may[i]
}
if (jun[i] >= max(jun[1:(i-1)], na.rm=T)) {
jun.max[i] <- jun[i]
}
if (aug[i] >= max(aug[1:(i-1)], na.rm=T)) {
aug.max[i] <- aug[i]
}
if (sep[i] >= max(sep[1:(i-1)], na.rm=T)) {
sep.max[i] <- sep[i]
}
if (oct[i] >= max(oct[1:(i-1)], na.rm=T)) {
oct.max[i] <- oct[i]
}
if (nov[i] >= max(nov[1:(i-1)], na.rm=T)) {
nov.max[i] <- nov[i]
}
if (dec[i] >= max(dec[1:(i-1)], na.rm=T)) {
dec.max[i] <- dec[i]
}
# Calculate monthly record minima
if (jan[i] < min(jan[1:(i-1)], na.rm=T)) {
jan.min[i] <- jan[i]
}
if (feb[i] < min(feb[1:(i-1)], na.rm=T)) {
feb.min[i] <- feb[i]
}
if (mar[i] < min(mar[1:(i-1)], na.rm=T)) {
mar.min[i] <- mar[i]
}
if (apr[i] < min(apr[1:(i-1)], na.rm=T)) {
apr.min[i] <- apr[i]
}
if (may[i] < min(may[1:(i-1)], na.rm=T)) {
may.min[i] <- may[i]
}
if (jun[i] < min(jun[1:(i-1)], na.rm=T)) {
jun.min[i] <- jun[i]
}
if (jul[i] < min(jul[1:(i-1)], na.rm=T)) {
jul.min[i] <- jul[i]
}
if (aug[i] < min(aug[1:(i-1)], na.rm=T)) {
aug.min[i] <- aug[i]
}
if (sep[i] < min(sep[1:(i-1)], na.rm=T)) {
sep.min[i] <- sep[i]
}
if (oct[i] < min(oct[1:(i-1)], na.rm=T)) {
oct.min[i] <- oct[i]
}
if (nov[i] < min(nov[1:(i-1)], na.rm=T)) {
nov.min[i] <- nov[i]
}
if (dec[i] < min(dec[1:(i-1)], na.rm=T)) {
dec.min[i] <- dec[i]
}
}
# Cleaning up for chart
jan.max[jan.max==0] <- NA
jan.min[jan.min==0] <- NA
feb.max[feb.max==0] <- NA
feb.min[feb.min==0] <- NA
mar.max[mar.max==0] <- NA
mar.min[mar.min==0] <- NA
apr.max[apr.max==0] <- NA
apr.min[apr.min==0] <- NA
may.max[may.max==0] <- NA
may.min[may.min==0] <- NA
jun.max[jun.max==0] <- NA
jun.min[jun.min==0] <- NA
jul.max[jul.max==0] <- NA
jul.min[jul.min==0] <- NA
aug.max[aug.max==0] <- NA
aug.min[aug.min==0] <- NA
sep.max[sep.max==0] <- NA
sep.min[sep.min==0] <- NA
oct.max[oct.max==0] <- NA
oct.min[oct.min==0] <- NA
nov.max[nov.max==0] <- NA
nov.min[nov.min==0] <- NA
dec.max[dec.max==0] <- NA
dec.min[dec.min==0] <- NA
temp.monthly <- zoo(temp.pre[,2], temp.pre[,1]) # Create zoo object for monthly temperature
temp.avg <- zoo(temp.pre[,3],temp.pre[,1])
temp.jan.min <- zoo(jan.min, temp.pre[,1])
temp.jan.max <- zoo(jan.max, temp.pre[,1])
temp.feb.min <- zoo(feb.min, temp.pre[,1])
temp.feb.max <- zoo(feb.max, temp.pre[,1])
temp.mar.min <- zoo(mar.min, temp.pre[,1])
temp.mar.max <- zoo(mar.max, temp.pre[,1])
temp.apr.min <- zoo(apr.min, temp.pre[,1])
temp.apr.max <- zoo(apr.max, temp.pre[,1])
temp.may.min <- zoo(may.min, temp.pre[,1])
temp.may.max <- zoo(may.max, temp.pre[,1])
temp.jun.min <- zoo(jun.min, temp.pre[,1])
temp.jun.max <- zoo(jun.max, temp.pre[,1])
temp.jul.min <- zoo(jul.min, temp.pre[,1])
temp.jul.max <- zoo(jul.max, temp.pre[,1])
temp.aug.min <- zoo(aug.min, temp.pre[,1])
temp.aug.max <- zoo(aug.max, temp.pre[,1])
temp.sep.min <- zoo(sep.min, temp.pre[,1])
temp.sep.max <- zoo(sep.max, temp.pre[,1])
temp.oct.min <- zoo(oct.min, temp.pre[,1])
temp.oct.max <- zoo(oct.max, temp.pre[,1])
temp.nov.min <- zoo(nov.min, temp.pre[,1])
temp.nov.max <- zoo(nov.max, temp.pre[,1])
temp.dec.min <- zoo(dec.min, temp.pre[,1])
temp.dec.max <- zoo(dec.max, temp.pre[,1])
# Plot data
xyplot(temp.monthly, alpha=0.6, xlim=c(1915,2023),
main="Evolution of monthly avg. temperatures at Bear Island (1920-2014)",xlab="Year",
ylab="Temperature", col="grey") +
as.layer( xyplot(temp.avg,col=c("black"), cex=1.5)) +
layer_(panel.xblocks(index(temp.monthly), index(temp.monthly) > "Aug 1984", col = "#E9F2F2")) +
as.layer( xyplot(temp.jan.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.feb.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.mar.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.apr.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.may.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.jun.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.jul.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.aug.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.sep.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.oct.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.nov.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.dec.min,col=c("blue"), fill=c("blue"), type=c("p"))) +
as.layer( xyplot(temp.jan.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.feb.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.mar.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.apr.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.may.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.jun.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.jul.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.aug.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.sep.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.oct.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.nov.max,col=c("red"), fill=c("red"), type=c("p"))) +
as.layer( xyplot(temp.dec.max,col=c("red"), fill=c("red"), type=c("p")))
trellis.focus("toplevel") ## has coordinate system [0,1] x [0,1]
panel.text(0.785, 0.1, "1984 - 2014", cex = 1, font = 2)
panel.text(0.52, 0.91, "(A dot indicates a new monthly record low (blue) or high (red) average monthly temperature since 1920)")
panel.text(0.925,0.61, "Annual avg.", cex = 1, font =3)
panel.text(0.925,0.59, "temperature", cex = 1, font =3)
trellis.unfocus()
install.package("ggmaps")
install.packages("ggmaps")
install.packages("ggmap")
library(ggmap)
mapImageData1 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "satellite",
zoom = 17)
ggmap(mapImageData1,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
mapImageData2 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "terrain",
zoom = 16)
ggmap(mapImageData2,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
mapImageData2 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "terrain",
zoom = 1)
ggmap(mapImageData2,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
mapImageData2 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "terrain",
zoom = 2)
ggmap(mapImageData2,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
mapImageData3 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "roadmap",
zoom = 16)
ggmap(mapImageData3,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
mapImageData3 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "roadmap",
zoom = 12)
mapImageData3 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "roadmap",
zoom = 16)
ggmap(mapImageData3,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
mapImageData4 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
color = "color",
source = "google",
maptype = "hybrid",
zoom = 12)
ggmap(mapImageData4,
extent = "device",
ylab = "Latitude",
xlab = "Longitude")
adm1 <- getData('GADM', country='HUN', level=0)
load("/Users/stefano/Desktop/GBR_adm2.RData")
stages<-(1:10)
#ELO Ranking Advantage Player Against AI
ELO<-c(800,600,500,400,300,200,100,0,-100,-200)
ProbW<-matrix(NA,length(stages),1)
for(i in 1:length(stages)){
e<- 0.00583*ELO[i]-0.0505
ProbW[i,]<- 1-1/(1+exp(e))
}
ProbW
probL<-matrix(NA,length(stages),1)
for(i in 1:length(stages)){
probL[i,]<- 1-ProbW[i,]
}
probL
ELOtable<-data.frame(stages,ELO,ProbW,probL)
ELOtable
Players=10000
time<-(1:10)
time
set.seed(1234)
Avtime<-matrix(NA,length(time),2)
colnames(Avtime)<-c("Av. Time for Stage","Prob. of solving under the av. time")
Avtime
for (i in 1:length(time)){
PlayersTime<- rexp(Players,1/time[i])
Avtime[i,1]<- mean(PlayersTime)
Avtime[i,2]<- sum(PlayersTime<mean(PlayersTime))/Players
}
FinalProbMatrix<-round(data.frame(stages,ProbW*Avtime[,2],ProbW*(1-Avtime[,2]),probL),3)
colnames(FinalProbMatrix)<-c("Stage","Probability of Wining w/ enjoy", "Probability of winning no enjoy", "Probability of loosing")
FinalProbMatrix
Avtime
PlayersTime
Avtime<-matrix(NA,length(time),2)
Avtime
colnames(Avtime)<-c("Av. Time for Stage","Prob. of solving under the av. time")
Avtime
raw.playing.times <- matrix(NA, length(Player)*length(time))
raw.playing.times <- matrix(NA, length(Players)*length(time))
raw.playing.times
raw.playing.times <- matrix(NA, Players*length(time))
raw.playing.times
head(raw.playing.times)
colnames(raw.playing.times) <- c("Level","Time")
raw.playing.times <- matrix(NA, Players*length(time), 2) # store raw playing times from simulation
colnames(raw.playing.times) <- c("Level","Time")
head(raw.playing.times)
PlayersTime<- rexp(Players,1/time[i])
PlayersTime
for (i in 1:length(time)){
PlayersTime<- rexp(Players,1/time[i])
raw.playing.times[(Players*(i-1)+1):(Players*i),] <- PlayersTime
Avtime[i,1]<- mean(PlayersTime)
Avtime[i,2]<- sum(PlayersTime<mean(PlayersTime))/Players
}
raw.playing.times
tail(raw.playing.times)
for (i in 1:length(time)){
PlayersTime<- rexp(Players,1/time[i])
raw.playing.times[(Players*(i-1)+1):(Players*i),2] <- i
raw.playing.times[(Players*(i-1)+1):(Players*i),2] <- PlayersTime
Avtime[i,1]<- mean(PlayersTime)
Avtime[i,2]<- sum(PlayersTime<mean(PlayersTime))/Players
}
tail(raw.playing.times)
for (i in 1:length(time)){
PlayersTime<- rexp(Players,1/time[i])
raw.playing.times[(Players*(i-1)+1):(Players*i),1] <- i
raw.playing.times[(Players*(i-1)+1):(Players*i),2] <- PlayersTime
Avtime[i,1]<- mean(PlayersTime)
Avtime[i,2]<- sum(PlayersTime<mean(PlayersTime))/Players
}
tail(raw.playing.times)
library(adabag)
?bagging
?bagging.cv
?predict.bagging
?bagging.cv
?boosting.cv
library(adabag)
setwd("~/Dropbox/MSc Data Science/Courses/006 - Machine Learning (14D005)/Competition/ThyNearestNeighbours")
D <- read.table("Kaggle_Covertype_training.csv", head = TRUE, sep=",")
for(i in 2:11){
D[,i] <- as.double(scale(as.numeric(D[,i]), center = TRUE, scale = TRUE))
}
data.scaled <- D
data <- D[1:10,-1]
data$Cover_Type = factor(data$Cover_Type)
train <- data[1:7,]
test <- data[8:10,]
# Trying with adabag package - BOOSTING
adafit.boo <- boosting(Cover_Type ~ ., data = train)
adapred.boo <- predict.boosting(adafit.boo, newdata = test)
adaerror.boo <- mean(adapred.boo$class != test[,ncol(test)])
adaerror.boo
adafit.bag <- bagging(Cover_Type ~ ., data = train)
adapred.bag <- predict.bagging(adafit.bag, newdata = test)
adaerror.bag <- mean(adapred.bag$class != test[,ncol(test)])
adaerror.bag
data <- D[1:200,-1]
train <- data[1:150,]
test <- data[51:200,]
train
test
adafit.boo <- boosting(Cover_Type ~ ., data = train)
adapred.boo <- predict.boosting(adafit.boo, newdata = test)
adaerror.boo <- mean(adapred.boo$class != test[,ncol(test)])
adaerror.boo
adafit.boo <- boosting(Cover_Type ~ ., data = train)
data <- D[1:500,-1]
train <- data[1:400,]
test <- data[401:500,]
adafit.boo <- boosting(Cover_Type ~ ., data = train)
adafit.boo.cv <- boosting(Cover_Type ~ ., data = train)
adafit.bag <- bagging(Cover_Type ~ ., data = train)
data$Cover_Type = factor(data$Cover_Type)
train <- data[1:400,]
test <- data[401:500,]
adafit.boo <- boosting(Cover_Type ~ ., data = train)
adapred.boo <- predict.boosting(adafit.boo, newdata = test)
adaerror.boo <- mean(adapred.boo$class != test[,ncol(test)])
adaerror.boo
adafit.boo.cv <- boosting(Cover_Type ~ ., data = train)
adapred.boo.cv <- predict.boosting(adafit.boo.cv, newdata = test)
adaerror.boo.cv <- mean(adapred.boo.cv$class != test[,ncol(test)])
adaerror.boo.cv
adafit.bag <- bagging(Cover_Type ~ ., data = train)
adapred.bag <- predict.bagging(adafit.bag, newdata = test)
adaerror.bag <- mean(adapred.bag$class != test[,ncol(test)])
adaerror.bag
adafit.bag.cv <- bagging.cv(Cover_Type ~ ., data = train)
adapred.bag.cv <- predict.bagging(adafit.bag.cv, newdata = test)
adapred.bag.cv <- predict.bagging(adafit.bag.cv, newdata = test)
adafit.bag.cv
?predict.bagging
adapred.bag.cv <- predict.bagging(adafit.bag.cv, newdata = test)
adafit.bag.cv$trees
adapred.bag.cv <- predict.bagging(adafit.bag.cv, newdata = test, newmfinal=1)
adapred.bag.cv <- predict.bagging(adafit.bag.cv, newdata = test, newmfinal=2)
adapred.bag <- predict.bagging(adafit.bag, newdata = test)
?bagging.cv
adafit.bag.cv <- bagging.cv(Cover_Type ~ ., data = train, mfinal=50)
adafit.boo
adafit.boo.cv
adafit.bag.cv
adafit.bag.cv$error
adafit.boo.cv
adafit.bag.cv <- bagging.cv(Cover_Type ~ ., data = data)
adafit.bag.cv$error
adaerror.bag
adaerror.boo.cv
adaerror.boo
nrow(data)
data <- D[,-1]
nrow(data)
train <- data[1:nrow(data)*0.9,]
nrow(train)
data <- D[,-1]
data$Cover_Type = factor(data$Cover_Type)
train <- data[1:47000,]
test <- data[47001:50000,]
